#+STARTUP: showall

#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:nil reveal_control:t
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800 reveal_slide_number:c/t
#+OPTIONS: toc:0
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: cube
#+REVEAL_THEME: moon
#+REVEAL_HLEVEL: 2
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Гуманистическая декомпозиция работы">
#+REVEAL_POSTAMBLE: <p> Created by Alexander Petrov (a.k.a Lysenko). </p>
#+REVEAL_PLUGINS: (markdown notes)
#+REVEAL_EXTRA_CSS: ./local.css

* Гуманистическая декомпозиция работы

[[https://twitter.com/alexpetrov_rb][@alexpetrov_rb]]

Ruby Russia 2019

28 Сентября 2019

* About me

#+ATTR_REVEAL: :frag roll-in
*Alexander Petrov* (a.k.a Lysenko) [[https://twitter.com/alexpetrov_rb][@alexpetrov_rb]]

#+ATTR_REVEAL: :frag roll-in
*Since 2015*
Senior *Ruby* / *Rails* / *Erlang* Developer at [[http://fun-box.ru/][FunBox]]

#+ATTR_REVEAL: :frag roll-in
*2006 - 2014* Enterprise *Java* Developer / Trainer / Architect / Team Leader

** Свойства гуманистической декомпозиции 1

#+ATTR_REVEAL: :frag roll-in
  - Задача должна быть самодостаточной и целостной. Созадавая решение задачи в голове, не должно быть частей в других задачах, которые могли бы ключевым образом повлиять на решение.

#+ATTR_REVEAL: :frag roll-in
  - Задача не должна превышать 3-5 дней, чтобы иметь обозримый, сильно сцепленный скоуп и быть управляемой.

#+BEGIN_NOTES
Разделяя доработку на подзадачи нужно следить за следующими свойствами задач:

- Задача должна быть самодостаточной и целостной. Созадавая решение задачи в голове, не должно быть частей в других задачах, которые могли бы ключевым образом повлиять на решение.
- Задача не должна превышать 3-4 дней, чтобы иметь обозримый, сильно сцепленный скоуп и быть управляемой.

С точки зрения архитектуры эти два правила соотносятся с принципом Loose Coupling / High Cohesion.
Loose Coupling: зависимости между задачами должны быть минимальными.
High Cohesion: сами задачи должны содержать сильно сцепленные наборы функциональности. То есть чтобы ничего нельзя было выбросить без риска потерять целостность размышлений о задаче.
#+END_NOTES

** Свойства гуманистической декомпозиции 2

#+ATTR_REVEAL: :frag roll-in
Loose Coupling / High Cohesion

#+ATTR_REVEAL: :frag roll-in
Loose Coupling: зависимости между задачами должны быть минимальными.

#+ATTR_REVEAL: :frag roll-in
High Cohesion: сами задачи должны содержать сильно сцепленные наборы функциональности. Ничего нельзя выбросить без риска потерять целостность размышлений о задаче.

** Верификация декомпозиции 1

Контольные вопросы к каждой задаче:

#+ATTR_REVEAL: :frag roll-in
- Можно ли о задаче думать целостно в изоляции от других задач?

#+ATTR_REVEAL: :frag roll-in
- Можно ли вынести из задачи что-то лишнее, так чтобы при этом не рарушилась целостность?

#+ATTR_REVEAL: :frag roll-in
- Не является ли задача слишком маленькой, не является ли она частью какой-то большей задачи, чтобы та была целостной?

** Верификация декомпозиции 2

Контрольные вопросы к декомпозиции в целом:

#+ATTR_REVEAL: :frag roll-in
- Нет ли между задачами слишком сильных зависимостей или неявных зависимостей, в особенности если они даются разным исполнителям?

#+ATTR_REVEAL: :frag roll-in
- Являются ли все задачи управляемыми по побъему (не превышают 3 - 5 дней)?

#+ATTR_REVEAL: :frag roll-in
- Не слишком ли мелко разбиты задачи и не нарушена ли их целостность?

#+BEGIN_NOTES
Типичные примеры нарушения принципа целостности задачи:
- Разделение задач по созданию или изменению модели и задач в которых реализуеются части, которые этой моделью пользуются, будь то пользовательский интерфейс или бизнес логика.
Очень часто проектирование модели зависит от того, как эта модель будет использоваться, и какие ограничения на неё накладываются технологией реализации UI или принятой практикой в проекте.
В процессе работы одновременно над моделью и над использующим её кодом, постоянно происходят небольшие озарения, приводящие к более выгодному и лаконичному дизайну.

- Разделение задач внутри границ единого неделимого алгоритма
Если заранее слишком мелко поделить задачи, то есть риск, что части единого алгоритма окажутся в разных задачах и общая картина будет утеряна исполнителями.
В результате будет рабочими в лучшем случае 10 - 30% кейсов. Но  у разработчиков будет уверенность что они всё сделали всё правильно и оно даже работает.
#+END_NOTES

* Стратегии декомпозиции

Для получения декомпозиций удовлетворяющих описанным критериям могут помочь следующие стратегии

** Выделение смыслового ядра 1

#+ATTR_REVEAL: :frag roll-in
Выбрать основного исполнителя под смысловое ядро фичи.

#+ATTR_REVEAL: :frag roll-in
Делегировать второстепенные детали другому члену команды, чтобы разгрузить от них мозг основгого исполнителя.

** Выделение смыслового ядра 2

#+ATTR_REVEAL: :frag roll-in
Важно обеспечить минимальную зависимость (связность) между работами этих двух разработчиков.

#+ATTR_REVEAL: :frag roll-in
- Зависимость, через наличие поля или группы полей в модели - хорошая, ибо поля модели имеют более стабильную природу.

#+ATTR_REVEAL: :frag roll-in
- Зависимость от API какого-то сервисного объекта уже менее хороша для разделения. Она может служить признаком ошибки декомпозиции.

#+BEGIN_NOTES
Необходимость заранее выдумывать интерфейс и потом быть сковываемым необходимостью его поддерживать демотивирует и снижает продуктивность. Если при проведении границы допускается ошибка и граница оказывается внутри смыслового ядра, то это оборачивается некорректно реализованным алгоритмом, из-за того, что у исполнителей не было целостной картины и они делали свои части и не могли увидеть потенциальных проблем до их нахождения ручными тестировщиками.
#+END_NOTES

** Выделение смыслового ядра 3

По Фреду Бруксу, это напоминает метафору работы команды как хирурга и его ассистентов.

Причем "хирургом" можно иногда назначать не самого старшего разработчика в команде, а самого младшего (оказывая ему поддержку), чтобы он учился и чувствовал драйв.

#+BEGIN_NOTES
Может показаться, что это будет неэффективно, но кумулятивный эффект от такой работы и её благодатность для всех участников будет перекрывать кажущуюся краткосрочную неэффективность.
Развитие людей - самая большая ценность!
#+END_NOTES

** Выделение прототипа 1

Если после выделения смыслового ядра, оно остаётся достаточно большим и неуправляемым по трудозатратам, но не очевидно как разделить его на подзадачи управляемого размера, можно выделить несколько дней на прототипирование, и остальное время оставить на реализацию продуктовой версии фичи.

** Выделение прототипа 2

После прототипирования может возникнуть идея разделения на подзадачи основной работы.
И даже может возникнуть понимание, какие части к ядру не относятся и их можно делегировать.

** Отказ от детального проектирования на этапе декомпозиции

Велик риск ошибки детального проектирования во время декомпозиции.

#+ATTR_REVEAL: :frag roll-in
Детальному проектированию место при непосредственной работе над фичей или прототипировании.

#+BEGIN_NOTES
На этапе декомпозиции нужно стараться избегать преждевременного проектирования и оставлять его на этап непосредственной работы над фичей, или на этап прототипирования.
Иначе есть большой риск выбрать ошибочное решение и парализовать исполнителей в возможности его вовремя распознать и исправить.
#+END_NOTES

** Откладывание декомпозиции более поздних этапов работ до окончания ранних этапов работ

Очень большие бизнес фичи стоит декомпозировать поэтапно по мере готовности предыдущих этапов работ.

#+BEGIN_NOTES
Когда есть большой Epic из множества историй связанных но относительно независимых историй, то не стоит обеспечивать декомпозицию всех историй стразу, если менеджер не возражает.
Вместо этого стоит приступать к декомпозиции, когда откладывать её уже нельзя, и в этот же момент мы обладаем гораздо большим пониманием требований и получающейся архитектуры.
В том числе это даёт пространство для маневра в распределении работ.
#+END_NOTES

* Links

- Эрих Фромм "Революция надежды" и все его книги

- Фред Брукс "Мифический человекомесяц"

- Мери и Том Поппендик "Бережливое производство"

- Дейв Томас и Энди Хант "Программист прагматик"

- ДеМарко и Листер "Peopleware"

* Спасибо за внимание

* *Вопросы* и *дополнения*

Прошу подсказать мне стратегии гуманистической декомпозиции из вашего опыта
